#!/usr/bin/env python3

"""
sysmon - a SYStem MONitor written in python, designed to be easy
to understand, and "ready to use", without installing dependecies (except curses)

made by dev64 (also known as .dev, devlocalhost)
"""

from datetime import datetime
from plugins import extra

import sys
import curses
import select
import argparse
import importlib

arguments = [
    {
        "options": ["-nc", "--nocpuinfo"],
        "kwargs": {
            "action": "store_true",
            "help": "disables cpuinfo (cpu information, like usage, model, and more)",
        },
    },
    {
        "options": ["-nm", "--nomeminfo"],
        "kwargs": {
            "action": "store_true",
            "help": "disables meminfo (memory information, like total, used and more)",
        },
    },
    {
        "options": ["-nl", "--noloadavg"],
        "kwargs": {
            "action": "store_true",
            "help": "disables loadavg (load times information, including uptime, and more)",
        },
    },
    {
        "options": ["-np", "--noprocpid"],
        "kwargs": {
            "action": "store_true",
            "help": "disables procpid (shows the most vmrss consuming processes)",
        },
    },
    {
        "options": ["-nn", "--nonetstats"],
        "kwargs": {
            "action": "store_true",
            "help": "disables network_stats (network stats, like received/transfered bytes, and more)",
        },
    },
    {
        "options": ["-nt", "--notemp"],
        "kwargs": {"action": "store_true", "help": "disables cpu temperature"},
    },
    {
        "options": ["-ns", "--noswap"],
        "kwargs": {
            "action": "store_true",
            "help": "disables swap information in meminfo",
        },
    },
    {
        "options": ["-m", "--metric"],
        "kwargs": {
            "action": "store_true",
            "help": "use metric (1000) instead of IEC (1024) unit for data convertion",
        },
    },
    {
        "options": ["-p", "--procs"],
        "kwargs": {
            "type": int,
            "default": 6,
            "metavar": "INT",
            "help": "how many processes to show in procpid. Default: 6",
        },
    },
    {
        "options": ["-s", "--sleep"],
        "kwargs": {
            "type": float,
            "default": 1,
            "metavar": "FLOAT",
            "help": "refresh time. Default: 1.0",
        },
    },
]


def custom_help_formatter(prog):
    """fixing the ugly looking help menu"""
    return argparse.HelpFormatter(prog, max_help_position=46)


def parse_arguments():
    parser = argparse.ArgumentParser(
        formatter_class=custom_help_formatter,
        description="sysmon, a system monitor made in python | github.com/devlocalhost/sysmon",
    )

    for arg in arguments:
        parser.add_argument(*arg["options"], **arg["kwargs"])

    return parser.parse_args()

# formatting and arguments

# sysmon printing part

def start_sysmon(stdscr, plugins, sleep):
    """main printing method, what you see when you run sysmon"""

    stdscr.nodelay(True)

    curses.curs_set(0)
    curses.use_default_colors()

    try:
        while True:
            stdscr.erase()

            stdscr.addstr(
                f" --- Sysmon | {datetime.now().strftime('%I:%M:%S %p')} "
                + "-" * 42
                + "\n"
            )

            for func in plugins:
                stdscr.addstr(importlib.import_module(func).main())

            stdscr.addstr(f" {'-' * 67}")
            stdscr.refresh()

            rlist = select.select([sys.stdin], [], [], sleep)

            if rlist:
                kinput = stdscr.getch()

                if kinput == ord("q"):
                    curses.curs_set(1)
                    break

    except curses.error:
        sys.exit("Not enough space. Please resize")

    except KeyboardInterrupt:
        curses.endwin()
        curses.curs_set(1)

    curses.endwin()


def main():
    plugins_array = [
        'plugins.cpuinfo',
        'plugins.meminfo',
        'plugins.loadavg',
        'plugins.procpid',
        'plugins.netstats'
    ]

    for plugin in plugins_array:
        plugin_name = plugin.split(".")[1]

        if getattr(args, "no" + plugin_name):
            plugins_array.pop(plugins_array.index("plugins." + plugin_name))

    curses.wrapper(start_sysmon, plugins_array, args.sleep)


if __name__ == '__main__':
    args = parse_arguments()

    if args.notemp:
        extra.SHOW_TEMPERATURE = False

    if args.noswap:
        extra.SHOW_SWAP = False

    if args.procs:
        extra.PROCS = args.procs

    if args.metric:
        extra.CONVERSION_TYPE = 1000

    main()
