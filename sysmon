#!/usr/bin/env python3

"""
sysmon - a SYStem MONitor written in python, designed to be easy
to understand, and "ready to use", without installing dependecies (except curses)

made by dev64 (also known as .dev, devlocalhost)
"""


import os
import sys
import glob
import time
import curses
import shutil
import subprocess

from datetime import datetime

# sysmon basic functions start


def convert_bytes(fsize, units=(" bytes", " KiB", " MiB", " GiB", " TiB")):
    """convert bytes to k, m, g and t"""

    return (
        f"{float(fsize):.2f}{units[0]}"
        if fsize < 1024
        else convert_bytes(fsize / 1024, units[1:])
    )


def en_open(file, method="r"):
    """modifying the default open method so i dont have to define encoding every time"""
    return open(file, method, encoding="utf-8")


def detect_network_adapter():
    """detect an active network adapter/card/whatever and return its directory"""
    adp_directory = None

    for adapter_dir in glob.glob("/sys/class/net/*"):
        with en_open(adapter_dir + "/type") as device_type:
            if int(device_type.read()) != 772:  # if not loopback device

                with en_open(adapter_dir + "/operstate") as status:
                    if status.read().replace("\n", "") == "up":
                        adp_directory = adapter_dir

    return adp_directory


def file_has(string, lines):
    """checking if file contains string. return string if contains else return None"""

    has_string = None

    for line in lines:
        if line.startswith(string):
            has_string = line.replace("\t", "").split(":")[1]

    return has_string


def clean_output(text):
    """
    cleans the output that sysmon reads, so it gets only 1005744
    instead of MemTotal:        1005744 kB
    """

    return text.split(":")[0].replace(" ", "").replace("\n", "").replace("kB", "")


def to_bytes(kilobytes):
    """convert kilobytes to bytes"""

    return kilobytes * 1024


def uptime_format(seconds):
    """format the uptime from seconds to a human readable format"""

    intervals = (("weeks", 604800), ("days", 86400), ("hours", 3600), ("minutes", 60))
    result = []

    for name, count in intervals:
        value = seconds // count

        if value:
            seconds -= value * count

            if value == 1:
                name = name.rstrip("s")

            result.append(f"{value} {name}")

    return ", ".join(result)


def clean_cpu_model(model):
    """cleaning cpu model"""
    replace_stuff = [
        "(R)",
        "(TM)",
        "(tm)",
        "Processor",
        "processor",
        '"AuthenticAMD"',
        "Chip Revision",
        "Technologies, Inc",
        "CPU",
    ]

    for text in replace_stuff:
        model = model.replace(text, "")

    return " ".join(model.split()).split("@", maxsplit=1)[0].rstrip(" ")


# sysmon basic functions end

# sysmon cpu


def cpu_usage():
    """
    /proc/stat - cpu usage of the system
    """
    os.makedirs("/tmp/sysmon_save", exist_ok=True)

    try:
        if not os.path.exists("/tmp/sysmon_save/cpu_old_data"):
            with en_open("/tmp/sysmon_save/cpu_old_data", "a") as temp_file:
                temp_file.write("cpu.758102.17.259220.2395399.122421.3.1284")

        with en_open("/tmp/sysmon_save/cpu_old_data") as old_stats:
            old_stats = old_stats.readline().split(".")
            previous_data = (
                int(old_stats[1])
                + int(old_stats[2])
                + int(old_stats[3])
                + int(old_stats[6])
                + int(old_stats[7])
            )

        with en_open("/proc/stat") as new_stats:
            new_stats = (
                new_stats.readline().replace("cpu ", "cpu").replace("\n", "").split(" ")
            )

            current_data = (
                int(new_stats[1])
                + int(new_stats[2])
                + int(new_stats[3])
                + int(new_stats[6])
                + int(new_stats[7])
            )

        total = sum(map(int, old_stats[1:])) - sum(map(int, new_stats[1:]))

        with en_open("/tmp/sysmon_save/cpu_old_data", "w") as update_data:
            update_data.write(".".join(new_stats))

        return round(100 * ((previous_data - current_data) / total))

    except FileNotFoundError:
        sys.exit("Couldnt find /proc/stat file")

    except PermissionError:
        sys.exit(
            "Couldnt read the file. Do you have read permissions for /proc/stat file?"
        )


def cpu_temp():
    """
    getting the cpu temperature from /sys/class/hwmon
    """

    temperature = "Unknown"

    for temp_dir in glob.glob("/sys/class/hwmon/*"):
        with en_open(temp_dir + "/name") as temp_type:
            if (temp_type.read() in "coretemp", "fam15h_power", "k10temp", "acpitz"):
                try:
                    with en_open(temp_dir + "/temp1_input") as temp_value:
                        temperature = int(int(temp_value.read().strip()) / 1000)

                except FileNotFoundError:
                    pass

    return temperature


def cpuinfo():
    """
    /proc/cpuinfo - cpu information
    """

    try:
        with en_open("/proc/cpuinfo") as cpuinfo_file:
            read_file = cpuinfo_file.readlines()

            cpu_freq = file_has("cpu MHz", read_file).replace("\n", "").replace(" ", "")

            model = clean_cpu_model(file_has("model name", read_file))
            cache_size = (
                file_has("cache size", read_file)
                .replace(" ", "")
                .replace("\n", "")
                .replace("KB", "")
            )
            architecture = subprocess.check_output(
                "uname -m", shell=True, text=True
            ).replace("\n", "")

            try:
                total_cores = (
                    file_has("cpu cores", read_file).replace(" ", "").replace("\n", "")
                )

            except AttributeError:
                total_cores = subprocess.check_output(
                    "nproc", shell=True, text=True
                ).replace("\n", "")

            try:
                total_threads = (
                    file_has("siblings", read_file).replace(" ", "").replace("\n", "")
                )

            except AttributeError:
                total_threads = subprocess.check_output(
                    "nproc --all", shell=True, text=True
                ).replace("\n", "")

            cpu_usage_num = cpu_usage()
            cpu_temperature = str(cpu_temp())

            if cpu_temperature != "Unknown":
                cpu_temperature += " C"

        return (
            f"          Usage: {cpu_usage_num}% "
            + " " * (3 - len(str(cpu_usage_num)))
            + f" ({cpu_temperature}) | {architecture} {model}\n"
            f"  Cores/Threads: {total_cores}/{total_threads} @ {cpu_freq} MHz"
            f" with {convert_bytes(to_bytes(int(cache_size)))} cache memory"
        )

    except FileNotFoundError:
        sys.exit("Couldnt find /proc/cpuinfo file")

    except PermissionError:
        sys.exit(
            "Couldnt read the file. Do you have read permissions for /proc/cpuinfo file?"
        )


# sysmon cpu

# sysmon loadavg


def loadavg():
    """
    /proc/loadavg - system load times and uptime
    """

    try:
        uptime_fmt = "Unknown"

        with open("/proc/loadavg", encoding="utf-8") as load_times_file:
            load_times_data = load_times_file.read()

            onemin = load_times_data.split(" ")[0]
            fivemin = load_times_data.split(" ")[1]
            fiveteenmin = load_times_data.split(" ")[2]
            threadactive = load_times_data.split(" ")[3].split("/")[0]
            threadtotal = load_times_data.split(" ")[3].split("/")[1]

        with open("/proc/uptime", encoding="utf-8") as uptime_file:
            uptime_data = uptime_file.read()
            uptime_secs = int(uptime_data.split(".", maxsplit=1)[0])

        if uptime_secs < 60:
            uptime_fmt = f"{uptime_secs} seconds"

        else:
            uptime_fmt = uptime_format(int(uptime_data.split(".", maxsplit=1)[0]))

        up_since_fmt = datetime.fromtimestamp(
            int(str(time.time()).split(".", maxsplit=1)[0]) - int(uptime_secs)
        ).strftime("%A %B %d %Y, %I:%M:%S %p")

        return (
            f"  System load: {onemin}, {fivemin}, {fiveteenmin} (1, 5, 15 mins)\n"
            f"      Threads: {threadactive} active, {threadtotal} total"
            f"\n\n  System up for {uptime_fmt}\n   Since {up_since_fmt}"
        )

    except FileNotFoundError:
        sys.exit("Couldnt find /proc/loadavg file")

    except PermissionError:
        sys.exit(
            "Couldnt read the file. Do you have read permissions for /proc/loadavg file?"
        )


# sysmon loadavg

# sysmon meminfo


def meminfo():
    """
    /proc/meminfo - system memory (ram) and swap information
    """

    try:
        with open("/proc/meminfo", encoding="utf-8") as meminfo_file:
            meminfo_data = meminfo_file.readlines()

            memory_total = to_bytes(
                int(clean_output(file_has("MemTotal", meminfo_data)))
            )
            memory_available = to_bytes(
                int(clean_output(file_has("MemAvailable", meminfo_data)))
            )
            memory_cached = to_bytes(
                int(clean_output(file_has("Cached", meminfo_data)))
            )

            memory_used = round(memory_total - memory_available)

            memory_used_percent = round((int(memory_used) / int(memory_total)) * 100, 1)
            memory_available_percent = round(100 - memory_used_percent, 1)

            if to_bytes(int(clean_output(file_has("SwapTotal", meminfo_data)))) != 0:
                swap_total = to_bytes(
                    int(clean_output(file_has("SwapTotal", meminfo_data)))
                )
                swap_available = to_bytes(
                    int(clean_output(file_has("SwapFree", meminfo_data)))
                )
                swap_cached = to_bytes(
                    int(clean_output(file_has("SwapCached", meminfo_data)))
                )

                swap_used = round(swap_total - swap_available)

                swap_used_percent = round((int(swap_used) / int(swap_total)) * 100, 1)
                swap_available_percent = round(100 - swap_used_percent, 1)

                memory_used_format = (
                    f"{convert_bytes(memory_used)} ({memory_used_percent}%)"
                )
                memory_avail_format = (
                    f"{convert_bytes(memory_available)} "
                    f"({memory_available_percent}%)"
                )

                return (
                    "  RAM:                           Swap:\n"
                    f"       Total: {convert_bytes(memory_total)}"
                    + " " * (25 - len(convert_bytes(swap_total)))
                    + f"Total: {convert_bytes(swap_total)}\n"
                    f"        Used: {memory_used_format}"
                    + " " * (26 - len(memory_used_format))
                    + f"Used: {convert_bytes(swap_used)} ({swap_used_percent}%)\n"
                    f"   Available: {memory_avail_format}"
                    + " " * (21 - len(memory_avail_format))
                    + f"Available: {convert_bytes(swap_available)} ({swap_available_percent}%)\n"
                    f"      Cached: {convert_bytes(memory_cached)}"
                    + " " * (24 - len(convert_bytes(memory_cached)))
                    + f"Cached: {convert_bytes(swap_cached)}"
                )

            return (
                "  RAM:                           Swap: Disabled or not available\n"
                f"       Total: {convert_bytes(memory_total)}\n"
                f"        Used: {convert_bytes(memory_used)} ({memory_used_percent}%)\n"
                f"   Available: {convert_bytes(memory_available)} ({memory_available_percent}%)\n"
                f"      Cached: {convert_bytes(memory_cached)}"
            )

    except FileNotFoundError:
        sys.exit("Couldnt find /proc/meminfo file")

    except PermissionError:
        sys.exit(
            "Couldnt read the file. Do you have read permissions for /proc/meminfo file?"
        )


# sysmon meminfo

# sysmon net


def network_stats():
    """
    /sys/class/net/ - network stats, and speed
    """

    adapter_directory = detect_network_adapter()

    if adapter_directory is not None:
        os.makedirs("/tmp/sysmon_save", exist_ok=True)
        save_directory = "/tmp/sysmon_save/"

        if not os.path.isfile(f"{save_directory}rx") and not os.path.isfile(
            f"{save_directory}tx"
        ):
            with en_open(f"{save_directory}rx", "w") as rx_file:
                rx_file.write("0")

            with en_open(f"{save_directory}tx", "w") as tx_file:
                tx_file.write("0")

        with en_open(adapter_directory + "/statistics/rx_bytes") as received:
            received = int(received.read().replace("\n", ""))

        with en_open(adapter_directory + "/statistics/tx_bytes") as transferred:
            transferred = int(transferred.read().replace("\n", ""))

        with en_open(f"{save_directory}rx") as recv_speed:
            recv_speed = abs(int(recv_speed.read().replace("\n", "")) - received)

        with en_open(f"{save_directory}tx") as transf_speed:
            transf_speed = abs(int(transf_speed.read().replace("\n", "")) - transferred)

        with en_open(f"{save_directory}rx", "w") as rxsave:
            rxsave.write(str(received))

        with en_open(f"{save_directory}tx", "w") as txsave:
            txsave.write(str(transferred))

        human_received = convert_bytes(received)
        human_transferred = convert_bytes(transferred)

        return (
            f"       Device: {adapter_directory.split('/')[4]}\n"
            f"     Received: {human_received}"
            + " " * (14 - len(human_received))
            + f"({received} bytes)\n"
            f"  Transferred: {human_transferred}"
            + " " * (14 - len(human_transferred))
            + f"({transferred} bytes)\n"
            f"        Speed: Down {convert_bytes(recv_speed)}"
            + " " * (14 - len(convert_bytes(recv_speed)))
            + f"| Up {convert_bytes(transf_speed)}"
        )

    return "  No adapter available"


# sysmon net

# sysmon disk usage


def statvfs(disk_name=None):
    """
    shutils disk usage (which uses os.statvfs) - get partition usage
    """
    if not disk_name:
        disk_name = "/"

    total, used, free = shutil.disk_usage(disk_name)

    converted_total = convert_bytes(total)
    converted_used = convert_bytes(used)
    converted_free = convert_bytes(free)

    used_percent = round((int(used) / int(total)) * 100, 1)
    available_percent = round(100 - used_percent, 1)

    return (
        f"  Total: {converted_total}\n"
        + f"   Used: {converted_used} ({used_percent}%)\n"
        + f"   Free: {converted_free} ({available_percent}%)"
    )


# sysmon disk usage


def main(print_out):
    """main printing method, what you see when you run sysmon"""

    curses.curs_set(0)
    curses.use_default_colors()

    point_name = "/"

    try:
        if sys.argv[1] == "point":
            point_name = sys.argv[2]

            del sys.argv[1]
            del sys.argv[1]

    except IndexError:
        pass

    plugins_functions = {
        "cpuinfo": cpuinfo,
        "meminfo": meminfo,
        "loadavg": loadavg,
        "net": network_stats,
        "statvfs": lambda: statvfs(point_name),
    }

    try:
        if sys.argv[1] in plugins_functions:
            try:
                point_name = sys.argv[2]

            except IndexError:
                pass

            while True:
                print_out.addstr(
                    f"--- Sysmon | {datetime.now().strftime('%I:%M:%S %p')} "
                    + "-" * 41
                    + "\n"
                )

                if sys.argv[1] in ("cpuinfo", "loadavg", "meminfo"):
                    print_out.addstr(f" --- /proc/{sys.argv[1]} " + "-" * 47 + "\n")

                elif sys.argv[1] == "net":
                    print_out.addstr(" --- /sys/class/net " + "-" * 46 + "\n")

                else:
                    print_out.addstr(
                        f" --- mountpoint {point_name} "
                        + "-" * (45 - len(point_name))
                        + "----\n"
                    )

                print_out.addstr(plugins_functions[sys.argv[1]]())

                print_out.addstr("\n" + "-" * 66)

                try:
                    print_out.refresh()
                    time.sleep(1)
                    print_out.clear()

                except KeyboardInterrupt:
                    curses.endwin()
                    curses.curs_set(1)
                    sys.exit()

        elif sys.argv[1] == "help":
            sys.exit(
                "sysmon - a SYStem MONitor written in python, designed to be easy"
                ' to understand\n         and "ready to use", with only ONE '
                "dependecy: curses\n\n"
                "Usage: sysmon ARG which can be: cpuinfo, meminfo, loadavg, net, and statvfs\n"
                "                                or bl ARG1 ARGX\n"
                " Explanation:\n"
                "     - cpuinfo: cpu information such as model, cores & threads, and freq\n"
                "     - meminfo: memory and swap information like used, total, available and"
                "\n                cached\n"
                "     - loadavg: load times, uptime, and threads running\n"
                "     -     net: network stats, including up/down speed\n"
                "     -  stavfs: mountpoint usage, like used, total and free\n"
                '            To change which mountpoint to show, use "point MOUNTPOINT"\n'
                "            for example: sysmon point /mnt/usb/\n"
                "     -      bl: blacklist a plugin\n\n"
                "Notes:\n"
                "  - CPU frequency isnt always the same, this depends on the kernel config\n"
                '  - Cached memory is part of used memory (cached - used = "actual" used)\n'
                "  - Was planning to add cpu temperature, but its kinda confusing (because\n"
                "   of different methods possible, which dont work on every hardware)"
            )

        elif sys.argv[1] == "bl":
            del sys.argv[0]
            del sys.argv[0]

            try:
                for plugin_arg in sys.argv:
                    del plugins_functions[plugin_arg]

                while True:
                    print_out.addstr(
                        f"--- Sysmon | {datetime.now().strftime('%I:%M:%S %p')} "
                        + "-" * 41
                    )

                    for plugin in plugins_functions:
                        if plugin in ("cpuinfo", "loadavg", "meminfo"):
                            print_out.addstr(
                                f"\n --- /proc/{plugin} " + "-" * 47 + "\n"
                            )

                        elif plugin == "net":
                            print_out.addstr("\n --- /sys/class/net " + "-" * 46 + "\n")

                        else:
                            print_out.addstr(
                                f"\n --- mountpoint {point_name} "
                                + "-" * (45 - len(point_name))
                                + "----\n"
                            )

                        print_out.addstr(plugins_functions[plugin]() + "\n")

                    print_out.addstr("-" * 66)

                    try:
                        print_out.refresh()
                        time.sleep(1)
                        print_out.clear()

                    except KeyboardInterrupt:
                        curses.endwin()
                        curses.curs_set(1)
                        sys.exit()

            except IndexError:
                sys.exit(f'"{sys.argv[1]}" is not a valid plugin')

        else:
            sys.exit(f'"{sys.argv[1]}" is not a valid plugin or argument')

    except IndexError:
        while True:
            try:
                print_out.addstr(
                    f"--- Sysmon | {datetime.now().strftime('%I:%M:%S %p')} "
                    + "-" * 41
                    + "\n"
                )

                print_out.addstr(
                    " --- /proc/cpuinfo " + "-" * 47 + "\n" + cpuinfo() + "\n\n"
                )

                print_out.addstr(
                    " --- /proc/meminfo " + "-" * 47 + "\n" + meminfo() + "\n\n"
                )

                print_out.addstr(
                    " --- /proc/loadavg " + "-" * 47 + "\n" + loadavg() + "\n\n"
                )

                print_out.addstr(
                    " --- /sys/class/net " + "-" * 46 + "\n" + network_stats() + "\n\n"
                )

                print_out.addstr(
                    f" --- mountpoint {point_name} "
                    + "-" * (45 - len(point_name))
                    + "----\n"
                    + statvfs(point_name)
                    + "\n"
                    + "-" * 66
                )

            except curses.error:
                print_out.refresh()
                print_out.clear()

                curses.endwin()
                curses.curs_set(1)

                sys.exit("Please resize your terminal (67x30)")

            try:
                print_out.refresh()
                time.sleep(1)
                print_out.clear()

            except KeyboardInterrupt:
                curses.endwin()
                curses.curs_set(1)
                sys.exit()


curses.wrapper(main)
